  1
-----
Write a program named **CheckCredit** that prompts users to 
enter a purchase price for an item. If the value entered is 
greater than a credit limit of $8,000, display an error 
message; otherwise, display `Approved`.

  2
-----
Write a program named **Twitter** that accepts a user’s 
message and determines whether it is short enough for a 
social networking service that does not accept messages of 
more than 140 characters.

  3
-----
Write a program named **Admission** for a college’s 
admissions office. The user enters a numeric high school 
grade point average (for example, 3.2) and an admission 
test score. Display the message `Accept` if the student 
meets either of the following requirements:

* A grade point average of 3.0 or higher, and an admission
 test score of at least 60

* A grade point average of less than 3.0, and an admission
 test score of at least 80

* If the student does not meet either of the qualification
 criteria, display `Reject`.

  4
-----
The Saffir-Simpson Hurricane Scale classifies hurricanes 
into five categories numbered 1 through 5. Write an 
application named **Hurricane** that outputs a hurricane’s 
category based on the user’s input of the wind speed. 
Category 5 hurricanes have sustained winds of at least 
157 miles per hour. The minimum sustained wind speeds for 
categories 4 through 1 are 130, 111, 96, and 74 miles per 
hour, respectively. Any storm with winds of less than 74 
miles per hour is not a hurricane.

  5
-----
* *a.* Write a program named **CheckMonth** that prompts 
a user to enter a birth month. If the value entered is 
greater than 12 or less than 1, display an error message; 
otherwise, display the valid month with a message such as 
3 is a valid month.

* *b.* Write a program named **CheckMonth2** that prompts 
a user to enter a birth month and day. Display an error 
message if the month is invalid (not 1 through 12) or the 
day is invalid for the month (for example, not between 1 
and 31 for January or between 1 and 29 for February). If 
the month and day are valid, display them with a message.

  6
-----
Account numbers sometimes contain a check digit that is 
the result of a mathematical calculation. The inclusion 
of the digit in an account number helps ascertain whether 
the number is a valid one. Write an application named 
**CheckDigit** that asks a user to enter a four-digit 
account number and determines whether it is a valid number. 
The number is valid if the fourth digit is the remainder 
when the number represented by the first three digits of 
the four-digit number is divided by 7. For example, 7770 
is valid, because 0 is the remainder when 777 is divided by 7.

The next problems rely on the generation of a random number. 
You can create a random number that is at least min but less 
than max using the following statements:
Program code. In the code, the words in the variable names 
are merged.
```cs
Random ranNumberGenerator = new Random();
int randomNumber;
randomNumber = ranNumberGenerator.Next(min, max);
```
  7
-----
Write a program named **GuessingGame** that generates a 
random number between 1 and 10. (In other words, in the 
example above, `min` is 1 and `max` is 11.) Ask a user 
to guess the random number, then display the random number 
and a message indicating whether the user’s guess was too 
high, too low, or correct.
